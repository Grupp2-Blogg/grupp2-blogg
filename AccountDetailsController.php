<?php

declare(strict_types=1);
require_once './userModel.php';

class AccountDetailsController
{
    private PDO $pdo;
    private User $userModel;

    public function __construct(PDO $pdo)
    {
        $this->pdo = $pdo;
        $this->userModel = new User($this->pdo);
    }

    /**
     * Uppdaterar anvÃ¤ndarens konto.
     */
    public function updateAccount(int $id): void
    {
        $username = trim($_POST['username']);
        $email = trim($_POST['email']);
        $firstname = trim($_POST['firstname']) ?: null;
        $lastname = trim($_POST['lastname']) ?: null;
        $gender = trim($_POST['gender']) ?: null;
        $birthyear = trim($_POST['birthyear']);
        $birthyear = $birthyear === '' ? null : (int)$birthyear;

        $errors = [];

        // Validering
        if (empty($username) || empty($email)) {
            $errors["no_input"] = "Fyll i de obligatoriska fÃ¤lten!";
        }
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            $errors["invalid_email"] = "Ogiltigt format pÃ¥ email!";
        }

        // Kolla om e-post eller anvÃ¤ndarnamn redan finns
        if ($_SESSION['user']['email'] !== $email && $this->userModel->existsByEmail($email)) {
            $errors["email_taken"] = "Email-adressen Ã¤r redan tagen!";
        }
        if ($_SESSION['user']['username'] !== $username && $this->userModel->existsByUsername($username)) {
            $errors["username_taken"] = "AnvÃ¤ndarnamnet Ã¤r redan taget!";
        }

        // Om fel uppstÃ¥tt, skicka tillbaka anvÃ¤ndaren
        if (!empty($errors)) {
            $_SESSION['errors_account'] = $errors;
            header("Location: ./accountDetails.php?mode=account-enter-edit");
            exit;
        }

        // Uppdatera anvÃ¤ndarinfo
        $this->userModel->updateUserInfo($id, $username, $email, $firstname, $lastname, $gender, $birthyear);

        // HÃ¤mta uppdaterad info
        $updatedUser = $this->userModel->getAllInfoByID($id);
        if (!$updatedUser) {
            $_SESSION['errors_account'] = ["invalid_fetch" => "Kunde inte hÃ¤mta anvÃ¤ndare"];
            header("Location: ./login.php");
            exit;
        }

        // Uppdatera sessionen och skicka tillbaka anvÃ¤ndaren
        $_SESSION['user'] = $updatedUser;
        header("Location: ./accountDetails.php");
        exit;
    }

    /**
     * Uppdaterar lÃ¶senordet efter att gammalt lÃ¶senord har bekrÃ¤ftats.
     */
    public function updatePassword(int $id): void
    {
        $newPwd = trim($_POST['pw-update']);
        $repeatPwd = trim($_POST['pw-update-repeat']);
        $errors = [];

        if (empty($newPwd) || empty($repeatPwd)) {
            $errors['no_input'] = "Fyll i bÃ¥da fÃ¤lten!";
        } elseif ($newPwd !== $repeatPwd) {
            $errors['pw_mismatch'] = "LÃ¶senorden matchar inte, fÃ¶rsÃ¶k igen";
        }

        if (!empty($errors)) {
            $_SESSION['errors_account'] = $errors;
            header("Location: ./accountDetails.php?mode=pw-enter-edit");
            exit;
        }

        // Uppdatera lÃ¶senord
        $this->userModel->updateUserPwd($id, $newPwd);
        $_SESSION['pwd_update_complete'] = "LÃ¶senord uppdaterat!";
        header("Location: ./accountDetails.php");
        exit;
    }

    /**
     * BekrÃ¤ftar anvÃ¤ndarens gamla lÃ¶senord innan lÃ¶senord eller konto kan Ã¤ndras.
     */
    public function confirmOldPassword(int $id): void
    {
        $oldPwd = trim($_POST['pw-confirm-old']);
        $errors = [];

        if (empty($oldPwd)) {
            $errors['no_input'] = "Fyll i lÃ¶senord";
        }

        $user = $this->userModel->auth_PwdUpdate($id, $oldPwd);
        if ($user === false) {
            $errors['errors_confirm'] = "Fel lÃ¶senord - fÃ¶rsÃ¶k igen";
        } elseif ($user === null) {
            $errors["invalid_fetch"] = "Kunde inte hÃ¤mta anvÃ¤ndare";
        }

        if (!empty($errors)) {
            $_SESSION['errors_account'] = $errors;
            header("Location: ./account_details.php?mode=pw-enter-confirm-old");
            exit;
        }

        $mode = '';
        // Om lÃ¶senord bekrÃ¤ftats, bestÃ¤m om det gÃ¤ller lÃ¶senordsbyte eller kontoborttagning
        if (!empty($_SESSION['delete-pw-confirm']) && $_SESSION['delete-pw-confirm'] === 'true') {
            $mode = 'account-enter-destroy';
            unset($_SESSION['delete-pw-confirm']); // ðŸ”¹ Rensa vÃ¤rdet efter att det anvÃ¤nts
        } else {
            $mode = 'pw-enter-edit';
        }

        header("Location: ./accountDetails.php?mode=" . $mode);
        exit;
    }

    /**
     * Tar bort anvÃ¤ndarens konto.
     */
    public function deleteAccount(int $id): void
    {
        $this->userModel->delete($id);
        session_destroy();
        header("Location: ./index.php");
        exit;
    }

    /**
     * HÃ¤mtar anvÃ¤ndarinformation.
     */
    public function getUserInfo(int $id): array
    {
        return $this->userModel->getAllInfoByID($id);
    }
}
